{"version":3,"file":"static/webpack/static\\development\\pages\\imagechangeonScroll.js.a9347157eabcdee072f6.hot-update.js","sources":["webpack:///./src/ImageToggleOnScroll.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nconst ImageTogglerOnScroll = ({ primaryImg, secondaryImg }) => {\r\n  /* Initialize state of imageRef to null - when the component renders\r\n    it assignes imageRef to our constant, then we can use imageRef.current\r\n    to get to our image attributes */\r\n  const imageRef = useRef(null);\r\n  const [isLoading, setIsLoad] = useState(true);\r\n\r\n  /* add scrollEvent listener using useEffect when component mounts \r\n    first param = function that gets exectuted when component mounts*/\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", scrollHandler);\r\n    setInView(isInView());\r\n    setIsLoading(false);\r\n    /* second param - removes it when component unmounts */\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", scrollHandler);\r\n    };\r\n  });\r\n\r\n  /* tracks whether componant (image) is completely in browser showing window,\r\n  not in view by default(false)*/\r\n  const [inView, setInView] = useState(false);\r\n\r\n  const isInView = () => {\r\n    if (imageRef.current) {\r\n      /* magic code that returns whether image is showing in\r\n          scrollable area */\r\n      const rect = imageRef.current.getBoundingClientRect();\r\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /* set the inview state whether the image is in view.\r\n  Each time page scrolls, it gets calculated again */\r\n  const scrollHandler = () => {\r\n    setInView(() => {\r\n      return isInView();\r\n    });\r\n  };\r\n\r\n  return isLoading ? null : (\r\n    <img src={inView ? secondaryImg : primaryImg} alt=\"\" ref={imageRef} />\r\n  );\r\n};\r\n\r\nexport default ImageTogglerOnScroll;\r\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;;;AAGA;AACA;AALA;AAAA;AAAA;AAAA;AAOA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;AAnBA;AAAA;AAAA;AAAA;AACA;AAsBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;A","sourceRoot":""}