{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\repos\\\\hello-next\\\\src\\\\ImageToggleOnScroll.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\n\nvar ImageTogglerOnScroll = function ImageTogglerOnScroll(_ref) {\n  var primaryImg = _ref.primaryImg,\n      secondaryImg = _ref.secondaryImg;\n  var imageRef = useRef(null);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    setIsLoading(false);\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [isLoading]);\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inView = _useState4[0],\n      setInView = _useState4[1];\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  var scrollHandler = function scrollHandler() {\n    setInView(function () {\n      return isInView();\n    });\n  };\n\n  return isLoading ? null : React.createElement(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    width: \"200\",\n    height: \"200\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  });\n};\n\nexport default ImageTogglerOnScroll;","map":{"version":3,"sources":["D:\\repos\\hello-next\\src\\ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageTogglerOnScroll","primaryImg","secondaryImg","imageRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAkC;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AAC7D,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;;AAD6D,kBAE3BE,QAAQ,CAAC,IAAD,CAFmB;AAAA;AAAA,MAEtDK,SAFsD;AAAA,MAE3CC,YAF2C;;AAI7DP,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACD,KAFD;AAGD,GAPQ,EAON,CAACJ,SAAD,CAPM,CAAT;;AAJ6D,mBAajCL,QAAQ,CAAC,KAAD,CAbyB;AAAA;AAAA,MAatDa,MAbsD;AAAA,MAa9CH,SAb8C;;AAe7D,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIP,QAAQ,CAACU,OAAb,EAAsB;AACpB,UAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GAND;;AAQA,MAAMV,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BC,IAAAA,SAAS,CAAC,YAAM;AACd,aAAOC,QAAQ,EAAf;AACD,KAFQ,CAAT;AAGD,GAJD;;AAMA,SAAON,SAAS,GAAG,IAAH,GACd;AACE,IAAA,GAAG,EAAEQ,MAAM,GAAGV,YAAH,GAAkBD,UAD/B;AAEE,IAAA,GAAG,EAAC,EAFN;AAGE,IAAA,GAAG,EAAEE,QAHP;AAIE,IAAA,KAAK,EAAC,KAJR;AAKE,IAAA,MAAM,EAAC,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAtCD;;AAwCA,eAAeH,oBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst ImageTogglerOnScroll = ({ primaryImg, secondaryImg }) => {\r\n  const imageRef = useRef(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", scrollHandler);\r\n    setInView(isInView());\r\n    setIsLoading(false);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", scrollHandler);\r\n    };\r\n  }, [isLoading]);\r\n\r\n  const [inView, setInView] = useState(false);\r\n\r\n  const isInView = () => {\r\n    if (imageRef.current) {\r\n      const rect = imageRef.current.getBoundingClientRect();\r\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const scrollHandler = () => {\r\n    setInView(() => {\r\n      return isInView();\r\n    });\r\n  };\r\n\r\n  return isLoading ? null : (\r\n    <img\r\n      src={inView ? secondaryImg : primaryImg}\r\n      alt=\"\"\r\n      ref={imageRef}\r\n      width=\"200\"\r\n      height=\"200\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ImageTogglerOnScroll;\r\n"]},"metadata":{},"sourceType":"module"}