{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\repos\\\\hello-next\\\\src\\\\ImageToggleOnScroll.js\";\nimport React, { useEffect, useState, useRef } from \"react\";\n\nvar ImageTogglerOnScroll = function ImageTogglerOnScroll(_ref) {\n  var primaryImg = _ref.primaryImg,\n      secondaryImg = _ref.secondaryImg;\n\n  /* Initialize state of imageRef to null - when the component renders\r\n    it assignes imageRef to our constant, then we can use imageRef.current\r\n    to get to our image attributes */\n  var imageRef = useRef(null);\n  /* add scrollEvent listener using useEffect when component mounts \r\n    first param = function that gets exectuted when component mounts*/\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", scrollHandler);\n    /* second param - removes it when component unmounts */\n\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n  /* tracks whether componant (image) is completely in browser showing window,\r\n  not in view by default(false)*/\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      inView = _useState2[0],\n      setInView = _useState2[1];\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      /* magic code that returns whether image is showing in\r\n          scrollable area */\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n  /* set the inview state whether the image is in view.\r\n  Each time page scrolls, it gets calculated again */\n\n\n  var scrollHandler = function scrollHandler() {\n    setInView(function () {\n      return isInView();\n    });\n  };\n\n  return React.createElement(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  });\n};\n\nexport default ImageTogglerOnScroll;","map":{"version":3,"sources":["D:\\repos\\hello-next\\src\\ImageToggleOnScroll.js"],"names":["React","useEffect","useState","useRef","ImageTogglerOnScroll","primaryImg","secondaryImg","imageRef","window","addEventListener","scrollHandler","removeEventListener","inView","setInView","isInView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAkC;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAC7D;;;AAGA,MAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAD,CAAvB;AAEA;;;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACA;;AACA,WAAO,YAAM;AACXF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCD,aAArC;AACD,KAFD;AAGD,GANQ,CAAT;AAQA;;;AAhB6D,kBAkBjCR,QAAQ,CAAC,KAAD,CAlByB;AAAA;AAAA,MAkBtDU,MAlBsD;AAAA,MAkB9CC,SAlB8C;;AAoB7D,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIP,QAAQ,CAACQ,OAAb,EAAsB;AACpB;;AAEA,UAAMC,IAAI,GAAGT,QAAQ,CAACQ,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GARD;AAUA;;;;AAEA,MAAMV,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BG,IAAAA,SAAS,CAAC,YAAM;AACd,aAAOC,QAAQ,EAAf;AACD,KAFQ,CAAT;AAGD,GAJD;;AAMA,SAAO;AAAK,IAAA,GAAG,EAAEF,MAAM,GAAGN,YAAH,GAAkBD,UAAlC;AAA8C,IAAA,GAAG,EAAC,EAAlD;AAAqD,IAAA,GAAG,EAAEE,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAvCD;;AAyCA,eAAeH,oBAAf","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nconst ImageTogglerOnScroll = ({ primaryImg, secondaryImg }) => {\r\n  /* Initialize state of imageRef to null - when the component renders\r\n    it assignes imageRef to our constant, then we can use imageRef.current\r\n    to get to our image attributes */\r\n  const imageRef = useRef(null);\r\n\r\n  /* add scrollEvent listener using useEffect when component mounts \r\n    first param = function that gets exectuted when component mounts*/\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", scrollHandler);\r\n    /* second param - removes it when component unmounts */\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", scrollHandler);\r\n    };\r\n  });\r\n\r\n  /* tracks whether componant (image) is completely in browser showing window,\r\n  not in view by default(false)*/\r\n  const [inView, setInView] = useState(false);\r\n\r\n  const isInView = () => {\r\n    if (imageRef.current) {\r\n      /* magic code that returns whether image is showing in\r\n          scrollable area */\r\n      const rect = imageRef.current.getBoundingClientRect();\r\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /* set the inview state whether the image is in view.\r\n  Each time page scrolls, it gets calculated again */\r\n  const scrollHandler = () => {\r\n    setInView(() => {\r\n      return isInView();\r\n    });\r\n  };\r\n\r\n  return <img src={inView ? secondaryImg : primaryImg} alt=\"\" ref={imageRef} />;\r\n};\r\n\r\nexport default ImageTogglerOnScroll;\r\n"]},"metadata":{},"sourceType":"module"}